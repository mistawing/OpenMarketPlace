//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Organization.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Organization_OrganizationaddOrganizationCall: ClientCallUnary {}

fileprivate final class Organization_OrganizationaddOrganizationCallBase: ClientCallUnaryBase<Organization_orgMetadata, Organization_orgName>, Organization_OrganizationaddOrganizationCall {
  override class var method: String { return "/organization.Organization/addOrganization" }
}

internal protocol Organization_OrganizationgetOrganizationCall: ClientCallUnary {}

fileprivate final class Organization_OrganizationgetOrganizationCallBase: ClientCallUnaryBase<Organization_orgName, Organization_orgMetadata>, Organization_OrganizationgetOrganizationCall {
  override class var method: String { return "/organization.Organization/getOrganization" }
}

internal protocol Organization_OrganizationupdateOrganizationCall: ClientCallUnary {}

fileprivate final class Organization_OrganizationupdateOrganizationCallBase: ClientCallUnaryBase<Organization_orgMetadata, Organization_orgName>, Organization_OrganizationupdateOrganizationCall {
  override class var method: String { return "/organization.Organization/updateOrganization" }
}


/// Instantiate Organization_OrganizationServiceClient, then call methods of this protocol to make API calls.
internal protocol Organization_OrganizationService: ServiceClient {
  /// Synchronous. Unary.
  func addOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata) throws -> Organization_orgName
  /// Asynchronous. Unary.
  @discardableResult
  func addOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationaddOrganizationCall

  /// Synchronous. Unary.
  func getOrganization(_ request: Organization_orgName, metadata customMetadata: Metadata) throws -> Organization_orgMetadata
  /// Asynchronous. Unary.
  @discardableResult
  func getOrganization(_ request: Organization_orgName, metadata customMetadata: Metadata, completion: @escaping (Organization_orgMetadata?, CallResult) -> Void) throws -> Organization_OrganizationgetOrganizationCall

  /// Synchronous. Unary.
  func updateOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata) throws -> Organization_orgName
  /// Asynchronous. Unary.
  @discardableResult
  func updateOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationupdateOrganizationCall

}

internal extension Organization_OrganizationService {
  /// Synchronous. Unary.
  func addOrganization(_ request: Organization_orgMetadata) throws -> Organization_orgName {
    return try self.addOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func addOrganization(_ request: Organization_orgMetadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationaddOrganizationCall {
    return try self.addOrganization(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getOrganization(_ request: Organization_orgName) throws -> Organization_orgMetadata {
    return try self.getOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getOrganization(_ request: Organization_orgName, completion: @escaping (Organization_orgMetadata?, CallResult) -> Void) throws -> Organization_OrganizationgetOrganizationCall {
    return try self.getOrganization(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func updateOrganization(_ request: Organization_orgMetadata) throws -> Organization_orgName {
    return try self.updateOrganization(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func updateOrganization(_ request: Organization_orgMetadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationupdateOrganizationCall {
    return try self.updateOrganization(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Organization_OrganizationServiceClient: ServiceClientBase, Organization_OrganizationService {
  /// Synchronous. Unary.
  internal func addOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata) throws -> Organization_orgName {
    return try Organization_OrganizationaddOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func addOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationaddOrganizationCall {
    return try Organization_OrganizationaddOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getOrganization(_ request: Organization_orgName, metadata customMetadata: Metadata) throws -> Organization_orgMetadata {
    return try Organization_OrganizationgetOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getOrganization(_ request: Organization_orgName, metadata customMetadata: Metadata, completion: @escaping (Organization_orgMetadata?, CallResult) -> Void) throws -> Organization_OrganizationgetOrganizationCall {
    return try Organization_OrganizationgetOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata) throws -> Organization_orgName {
    return try Organization_OrganizationupdateOrganizationCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func updateOrganization(_ request: Organization_orgMetadata, metadata customMetadata: Metadata, completion: @escaping (Organization_orgName?, CallResult) -> Void) throws -> Organization_OrganizationupdateOrganizationCall {
    return try Organization_OrganizationupdateOrganizationCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Organization_OrganizationProvider: ServiceProvider {
  func addOrganization(request: Organization_orgMetadata, session: Organization_OrganizationaddOrganizationSession) throws -> Organization_orgName
  func getOrganization(request: Organization_orgName, session: Organization_OrganizationgetOrganizationSession) throws -> Organization_orgMetadata
  func updateOrganization(request: Organization_orgMetadata, session: Organization_OrganizationupdateOrganizationSession) throws -> Organization_orgName
}

extension Organization_OrganizationProvider {
  internal var serviceName: String { return "organization.Organization" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/organization.Organization/addOrganization":
      return try Organization_OrganizationaddOrganizationSessionBase(
        handler: handler,
        providerBlock: { try self.addOrganization(request: $0, session: $1 as! Organization_OrganizationaddOrganizationSessionBase) })
          .run()
    case "/organization.Organization/getOrganization":
      return try Organization_OrganizationgetOrganizationSessionBase(
        handler: handler,
        providerBlock: { try self.getOrganization(request: $0, session: $1 as! Organization_OrganizationgetOrganizationSessionBase) })
          .run()
    case "/organization.Organization/updateOrganization":
      return try Organization_OrganizationupdateOrganizationSessionBase(
        handler: handler,
        providerBlock: { try self.updateOrganization(request: $0, session: $1 as! Organization_OrganizationupdateOrganizationSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Organization_OrganizationaddOrganizationSession: ServerSessionUnary {}

fileprivate final class Organization_OrganizationaddOrganizationSessionBase: ServerSessionUnaryBase<Organization_orgMetadata, Organization_orgName>, Organization_OrganizationaddOrganizationSession {}

internal protocol Organization_OrganizationgetOrganizationSession: ServerSessionUnary {}

fileprivate final class Organization_OrganizationgetOrganizationSessionBase: ServerSessionUnaryBase<Organization_orgName, Organization_orgMetadata>, Organization_OrganizationgetOrganizationSession {}

internal protocol Organization_OrganizationupdateOrganizationSession: ServerSessionUnary {}

fileprivate final class Organization_OrganizationupdateOrganizationSessionBase: ServerSessionUnaryBase<Organization_orgMetadata, Organization_orgName>, Organization_OrganizationupdateOrganizationSession {}

